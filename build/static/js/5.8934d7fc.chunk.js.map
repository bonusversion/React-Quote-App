{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","QuoteItem","props","item","text","author","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","onClick","push","pathname","sorting","list","map","quote","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"mIAAA,oCAceA,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,8B,mBCNNI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,0FCkB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIP,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAMP,GAAE,kBAAaI,EAAMI,IAAMX,UAAU,MAA3C,iC,iBC4CSY,EArCG,SAACL,GACjB,IAXkBM,EAAQC,EAWpBC,EAAUC,uBACVC,EAAWC,wBAGXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QACrCC,GAhBYV,EAgBcN,EAAMM,OAhBZC,EAgBoBK,EAfvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,IAAM,EAAI,MAuBxC,OACE,eAAC,WAAD,WACE,qBAAKgB,QAZoB,WAC3BZ,EAAQa,KAAK,CACXC,SAAUZ,EAASY,SACnBR,OAAO,SAAD,OAAWF,EAAqB,OAAS,UASXnB,UAAWC,IAAQ6B,QAAvD,SACE,2CAAcX,EAAqB,aAAe,iBAEpD,oBAAInB,UAAWC,IAAQ8B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVD,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMtB,a,gCCORuB,UA7CE,WACf,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAkBF,OAfAC,qBAAU,WACRL,MACC,CAACA,IAaW,YAAXC,EAEA,qBAAKtC,UAAU,WAAf,SACE,cAAC2C,EAAA,EAAD,MAKFF,EACK,mBAAGzC,UAAU,mBAAb,SAAiCyC,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAI3D,cAAC,WAAD,UACE,cAAC,EAAD,CAAW/B,OAAQ0B,MAJd,cAACxC,EAAA,EAAD","file":"static/js/5.8934d7fc.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport {\n  useHistory,\n  useLocation,\n} from \"react-router-dom/cjs/react-router-dom.min\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id > quoteB.id ? -1 : 1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n    // history.push(\n    //   `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    // );\n  };\n\n  return (\n    <Fragment>\n      <div onClick={changeSortingHandler} className={classes.sorting}>\n        <button>Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import React, { Fragment, useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport { getAllQuotes } from \"../lib/api\";\nimport useHttp from \"../hooks/use-http\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst AllQuote = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n  //   const DUMMY_QUOTES = [\n  //     {\n  //       id: \"q1\",\n  //       author: \"Max\",\n  //       text: \"Learning React is fun!\",\n  //     },\n  //     {\n  //       id: \"q2\",\n  //       author: \"Bon\",\n  //       text: \"Learning React is great!\",\n  //     },\n  //   ];\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0))\n    return <NoQuotesFound />;\n\n  return (\n    <Fragment>\n      <QuoteList quotes={loadedQuotes} />\n    </Fragment>\n  );\n};\n\nexport default AllQuote;\n"],"sourceRoot":""}